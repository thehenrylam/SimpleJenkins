---
# Declares initial variables
# 
# What variables it creates:
#   1. first_time_setup: 
#     The variable determines if it only needs to template the jenkins CASC file w/o password, 
#     or if it needs to template using a password, apply the change by starting jenkins, and then retemplating w/o the password. 
#   2. force_setup:
#     The variable determines if we should just ignore first_time_setup and go through the entire setup process.
#     This is a straightforward way to flush everything and redo the whole playbook
#
- name: Check for first time setup
  hosts: localhost
  tasks:
    # Condition: If a Dockerfile exists, then this isn't a first time setup
    - name: Determine if Dockerfile is created 
      stat:
        path: "../../Dockerfile"
      register: dockerfile_status
    # Declare the variables
    - name: Determine First Time Setup Value
      set_fact:
        force_setup: "{{ force_setup | default(true) }}"
        first_time_setup: "{{ dockerfile_status.stat.exists == false }}"
    # Display the variables (for debugging and visibility)
    - name: Display First Time Setup Value
      debug:
        msg: "first_time_setup: {{ first_time_setup }} (Force: {{ force_setup }})"

# Template the Docker files (e.g. Dockerfile, docker-compose.yml, etc)
- name: Deploy Docker Files 
  hosts: localhost
  roles:
    - role: "deploy-config_fundamentals"
      when: first_time_setup or force_setup

# Template the Jenkins CASC file WITH the password
# 
# What it does:
#   1. Try to template Jenkins CASC
#   2. (ON FAILURE) Delete Docker Files and Jenkins CASC 
#     Why: It's to make it easier to re-execute by gauranteeing that first_time_setup will be true (i.e. No Dockerfile found)
#
- name: Deploy Jenkins CASC (with Password)
  hosts: localhost
  gather_facts: false
  #vars_files: "../group_vars/jenkins_credentials.yml"
  vars:
    set_passwords: true 
  tasks:
    # Load in the credentials file (Inform the user if it's missing)
    - block:
      - name: “Load Jenkins credentials (will error if missing)”
        include_vars:
          file: "../group_vars/jenkins_credentials.yml"
      rescue:
        - name: "Tell the user that they need to create the credentials"
          fail:
            msg: "deploy-config_standard failed; Please make sure that ./ansible/group_vars/jenkins_credentials.yml is created!"

    # Wrap the role (deploy-config_standard) with the "rescue" node (the steps to execute if a node fails)
    - block:
      # Execute the deploy-config_standard role
        - name: "Include the deploy-config_standard role"
          include_role:
            name: "deploy-config_standard"
      when: first_time_setup or force_setup

      # Perform the following steps if an error occurs (likely due to variable not found)
      rescue:
        # Remove Docker files
        - name: "Rollback Docker files"
          include_role:
            name: "remove-config_fundamentals"
        # Remove Jenkins CASC files
        - name: "Remove Jenkins CASC"
          file: 
            path: "../../jenkins_casc/jenkins.yaml"
            state: absent
        # Send out a message to describe the failure
        - name: "Raise failure status"
          fail:
            msg: "deploy-config_standard role failed; Docker files rolled back"

# Apply the Jenkins CASC 
# 
# What it does:
#   1. Start up Jenkins
#   2. Wait for Jenkins to fully get set up (i.e. Reach its LOGIN screen)
#   3. Stop Jenkins
# 
# Why it does this:
#   This is to make sure Jenkins reads the Jenkins CASC file and stores the passwords in its database
#   When Jenkins has those passwords stored, we can reuse the same CASC (but w/o passwords)
#   and minimize the amount of sensitive information that's exposed within the host when it comes time to use it
# 
- name: Apply Jenkins CASC 
  hosts: localhost
  roles:
    - role: "apply-jenkins-casc" 

# Template the Jenkins CASC file WITHOUT the password
- name: Deploy Jenkins CASC (without Password)
  hosts: localhost
  vars:
    set_passwords: false
  roles: 
    - role: "deploy-config_standard"
