---
- name: Determine static variables
  hosts: localhost
  tasks:
    - set_fact:
        deployment_marker_filepath: "{{ playbook_dir }}/../../logs/jenkins_setup.txt"
    - debug:
        msg:
          - "deployment_marker_filepath: {{ deployment_marker_filepath }}"

# Declares initial variables
# 
# What variables it creates:
#   1. first_time_setup: 
#     The variable determines the full setup process is needed.
#     The extra steps from the full setup process is the following:
#       - ...
#   2. force_deployment: (User uses the "force" variable to control its functionality)
#     The variable determines if we force ansible to go through the entire setup process.
#
- name: Check for first time setup
  hosts: localhost
  tasks:
    # Condition: If deployment_marker_filepath exists, then this IS NOT a first time setup
    - name: Determine if deployment_marker_filepath is created
      stat:
        path: "{{ deployment_marker_filepath }}"
      register: deployment_market_file
    # Declare variables
    - name: Determine first time setup values
      set_fact: 
        force_deployment: "{{ force | default(false) }}"
        first_time_setup: "{{ deployment_market_file.stat.exists == false }}"
    # Display the variables (for debugging and visibility)
    - name: Display first time setup values
      debug:
        msg: 
          - "first_time_setup: {{ first_time_setup }}"
          - "force: {{ (force_deployment|bool) }}"

# IF first_time_setup OR force_deployment: Make sure that the file of deployment marker is REMOVED
- name: Make sure that deployment_marker_filepath is removed
  hosts: localhost
  tasks:
    - file: 
        path: "{{ deployment_marker_filepath }}"
        state: absent
      when: first_time_setup or (force_deployment|bool)

# Template the Docker files (e.g. Dockerfile, docker-compose.yml)
- name: Deploy Docker files
  hosts: localhost
  vars_files:
    - "{{ playbook_dir }}//../group_vars/extra_plugins_standard.yml"
  roles:
    - role: "deploy-config_fundamentals"

# Deploy *.groovy DSL jobs into ./jenkins_casc/dsl_jobs/*
- name: Deploy jobs via groovy files using JenkinsDSL (STANDARD)
  hosts: localhost
  roles:
    - role: "deploy-jobs_standard"

# Save DSL jobs into ansible/group_vars/jobs.yml
- name: Save the current job configuration into ./ansible/group_vars/jobs.yml
  hosts: localhost
  roles:
    - role: "save-jobs"

# IF first_time_setup OR force_deployment: Template the Jenkins CasC file WITH the password
- name: Deploy Jenkins CasC (with Password)
  hosts: localhost
  vars: 
    set_passwords: true
  vars_files:
    - "{{ playbook_dir }}//../group_vars/jobs.yml"
  tasks:
    - block:
      # BLOCK:
      #   1. Load Jenkins credentials (jenkins_credentials.yml)
      #   2. Deploy the configuration (with Password)
      #   3. Apply the Jenkins CasC file
      - name: Load Jenkins credentials file (will error if missing)
        include_vars:
          file: "{{ playbook_dir }}/../group_vars/jenkins_credentials.yml"      
      - name: "Include the deploy-config_standard (with Password)"
        include_role:
          name: "deploy-config_standard"
      - name: Apply Jenkins CasC 
        include_role:
          name: "apply-jenkins-casc"
      when: first_time_setup or (force_deployment|bool)
      # RESCUE:
      #   1. Remove Jenkins CasC file (./jenkins_casc/jenkins.yaml)
      #   2. Raise the failure status
      rescue:
        - name: "Remove Jenkins CasC (to mitigate password exposure)"
          file:
            path: "{{ playbook_dir }}/../../jenkins_casc/jenkins.yaml"
            state: absent
        - name: "Raise the failure status"
          fail: 
            msg: "Deploy Jenkins CasC (with Password) failed!"

# Template the Jenkins CasC file (without Password)
- name: Deploy Jenkins CasC (without Password)
  hosts: localhost
  vars:
    set_passwords: false
  vars_files:
    - "{{ playbook_dir }}/../group_vars/jobs.yml"
  roles: 
    - role: "deploy-config_standard"

# Initialize or update timestamp of the deployment marker
- name: Create or update timestamp of the deployment marker
  hosts: localhost
  tasks:
    - command: touch {{ deployment_marker_filepath }}

